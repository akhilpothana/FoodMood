# FoodMood
A list of each implemented design pattern along with the classes that implement this design and the person that wrote the code

Achievements [Max Hamill] - This design pattern is implemented in the Achievements class. The class has checks for milestones for a few areas of progress that the user can make in the app. The persistent data was not quite ready when I coded this so I just need to link up the variables to the persisted data for the checks to be valid and the achievements will be fully complete.

Chart Prototype [Max Hamill] - This design pattern is implemented in the PieChartModel class. This class is a JavaFX application that is currently launched by calling the createChart() method in the chartsController class. When the class is launched it stages a Pie Chart prototype split 50/50 into 2 default values. The prototype data can be accessed using getChart() method that I implemented so we can use this prototype as a base for all of our pie charts. Still trying to learn JavaFX but to see my current model just create a chartsController and call createChart().

Drop-down Menu[Shawn Foreman] - This design pattern is located in the MainMenuUI class. This pattern allows the user to move across the screens of the application through a single bar located at the top of the application. There are a few pages within the application, but they are not yet fully developed or processed. The group will need to talk more about these pages and how the application will be divided still, and then more pages for the menu will be able to be created.

Recommendations [Shawn Foreman] - This design pattern is located in the Recommendation modules. This pattern creates a recommendation for the user based on their food preferences. This pattern is extremely dependant on data persistence, which has of this writing not been yet completed. For this step in the process I will create a method that will show what would be present for new users that do not have any favorite foods yet. So the group needs to settle on a type of data persistence that allows us to parse and sort the data, and then this pattern will be completed.

Facade [Akhil Pothana] - In the facade design pattern, a single class represents an underlying subsystem that is abstracted from the user. A facade class provides a unified interface to a set of interfaces in a system. This pattern is implemented using the MainMenuController class and its associated UI.

Input prompt [Akhil Pothana] - This design pattern is quite simple. Prompts for user input can be written into the JTextField. This allows for a cleaner UI and slightly simplified code since JLabels don't need to be created. I implemented this in LoginUI, but we will use this pattern wherever user input is necessary throughout the application. 
